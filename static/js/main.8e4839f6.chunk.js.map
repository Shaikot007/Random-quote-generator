{"version":3,"sources":["QuoteGenerator.js","serviceWorker.js","index.js"],"names":["QuoteGenerator","props","fetchData","fetch","method","headers","then","response","json","data","setState","quote","author","state","this","className","id","href","encodeURIComponent","title","target","rel","class","aria-hidden","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gQAkEeA,G,wDA9Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,UAAY,WACVC,MAAM,wDAAyD,CAC7DC,OAAQ,OACRC,QAAQ,CACN,kBAAmB,gDACnB,iBAAkB,qDAClB,eAAgB,uCAGnBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEF,EAAKC,SAAS,CACZC,MAAOF,EAAK,GAAGE,MACfC,OAAQH,EAAK,GAAGG,aAtBtB,EAAKC,MAAQ,CACXF,MAAO,GACPC,OAAQ,IAJO,E,gEAQjBE,KAAKZ,c,+BAsBL,OACE,kBAAC,WAAD,KACE,yBAAKa,UAAU,kBACb,yBAAKC,GAAG,WACN,4BAAQA,GAAG,aACT,6CACA,yBAAKA,GAAG,QAAR,KACKF,KAAKD,MAAMF,MADhB,MAGA,yBAAKK,GAAG,UAAR,KACKF,KAAKD,MAAMD,QAEhB,yBAAKG,UAAU,gBACb,uBAAGC,GAAG,cAAcC,KAAO,8EAAgFC,mBAAmB,IAAMJ,KAAKD,MAAMF,MAAQ,KAAOG,KAAKD,MAAMD,QAAUO,MAAM,oBAAoBC,OAAO,SAASC,IAAI,uBAC/N,uBAAGC,MAAM,yCAAyCC,cAAY,UAEhE,uBAAGP,GAAG,eAAeC,KAAO,6FAA+FC,mBAAmBJ,KAAKD,MAAMD,QAAU,YAAcM,mBAAmBJ,KAAKD,MAAMF,OAAS,uFAAyFQ,MAAM,qBAAqBC,OAAO,SAASC,IAAI,uBAC9V,uBAAGC,MAAM,uCAAuCC,cAAY,UAE9D,4BAAQP,GAAG,YAAYQ,QAASV,KAAKZ,WAArC,eAGJ,gCACE,sCAAW,uBAAGe,KAAK,gCAAgCG,OAAO,SAASC,IAAI,uBAA5D,oB,GAtDII,cCSTC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8e4839f6.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport './QuoteGenerator.css';\n\nclass QuoteGenerator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quote: \"\",\n      author: \"\"\n    }\n  }\n  componentDidMount() {\n    this.fetchData();\n  }\n  fetchData = () => { \n    fetch(\"https://andruxnet-random-famous-quotes.p.rapidapi.com\", {\n      method: \"POST\",\n      headers:{\n        'X-RapidAPI-Host': 'andruxnet-random-famous-quotes.p.rapidapi.com',\n        'X-RapidAPI-Key': 'azDfMNiayumshLNm8LqjF9dsMTkcp1iw8Eljsn4teh0209W9ZE',\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    })\n    .then(response => response.json())\n    .then(data => {\n      // console.log(JSON.stringify(data));\n        this.setState({\n          quote: data[0].quote,\n          author: data[0].author\n        })\n      }\n    )\n  }\n  render() {\n    return (\n      <Fragment>\n        <div className=\"QuoteGenerator\">\n          <div id=\"wrapper\">\n            <header id=\"quote-box\">\n              <h1>Quote Machine</h1>\n              <div id=\"text\">\n                \" {this.state.quote} \" \n              </div>\n              <div id=\"author\">\n                - {this.state.author}\n              </div>\n              <div className=\"SocialButton\">\n                <a id=\"tweet-quote\" href={('https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=' + encodeURIComponent('\"' + this.state.quote + '\" ' + this.state.author))} title=\"Tweet this quote!\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  <i class=\"fa fa-twitter-square fa-2x btn-tweeter\" aria-hidden=\"true\"></i>\n                </a>\n                <a id=\"tumblr-quote\" href={('https://www.tumblr.com/widgets/share/tool?posttype=quote&tags=quotes,freecodecamp&caption=' + encodeURIComponent(this.state.author) + '&content=' + encodeURIComponent(this.state.quote) + '&canonicalUrl=https%3A%2F%2Fwww.tumblr.com%2Fbuttons&shareSource=tumblr_share_button')} title=\"Tumblr this quote!\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  <i class=\"fa fa-tumblr-square fa-2x btn-tumblr\" aria-hidden=\"true\"></i>\n                </a>\n                <button id=\"new-quote\" onClick={this.fetchData}>New quote</button>\n              </div>\n            </header>\n            <footer>\n              <p>Made by <a href=\"https://github.com/Shaikot007\" target=\"_blank\" rel=\"noopener noreferrer\">Shaikot</a></p>\n            </footer>\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default QuoteGenerator;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './QuoteGenerator';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}